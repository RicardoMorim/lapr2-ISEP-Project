@startuml
skinparam classAttributeIconSize 0


class RegisterSkillUI
{
}

class SkillsController
{
    - List<String> skillList
    - Collaborator collaborator

    + getCollaborators()
    +addSkills(collaborator,skillList)
}

class CollaboratorRepository {
    + getAllCollaborator()
    + addSkills(collaborator,skillList)
}

class RegisterJobGUI{
}

class RegisterJobController {
    +registerJob(jobName)
}


class JobRepository {
    +addJob(jobName) : boolean
    +validate(job) : boolean
    +add(job) : boolean
}

class Job {
    -name
}

class RegisterCollaboratorUI {
}

class CollaboratorController {
    + createCLB(name : String, birthdate : String, contactMobile : String,\nemail : String, address : String, city : String,\ndocumentType, identificationNumber, admissionDate : String, identificationNumber : String, job : Job)
    + assignJob(job : Job) : void
    + getInstance() : JobRepository
    + getInstance() : CollaboratorRepository

}


class CollaboratorRepository {
    + create(name : String, birthdate : String, contactMobile : String,\nemail : String, address : String, city : String,\ndocumentType : String, identificationNumber : String, \nadmissionDate : String, taxpayerNumber : int, job : Job)
    + checkForDuplicates() : void
    + addCollaborator(collaborator) : void

}

class JobRepository {
    +createJob(title : String) : Job
    +checkForDuplicates() : void
    +validateJob() : void
}

class Job {
    - title : String
    + Job(title : String)
    +verifyJob(job : Job) : void
}


class SkillController {
    + getSkillList()
    + registerSkill(skill)
    + updateSkill(skill, name, shortDescription, Description)
    + removeSkill(skill)
}



class CollaboratorController {
    + checkForDuplicateCollaborator(collaborator)
    + registerCollaborator(name, email, address, phone, job, skills, birthDate, admissionDate, IDtype, taxpayerNumber, citizenNumber)
    + updateCollaborator(collaborator, name, email, address, phone, job, skills, birthDate, admissionDate, IDtype, taxpayerNumber, citizenNumber)
    + removeCollaborator(collaborator)
    + addSkillToACollaborator(skill, collaborator)
    + removeSkillFromACollaborator(skill, collaborator)
}



class SkillRepository {
    + add(skill)
    + remove(skill)
    + update(skill, name, shortDescription, Description)
    + getSkills()
}

class CollaboratorRepository {
    + add(collaborator)
    + remove(collaborator)
    + update(collaborator, name, email, address, phone, job, skills, birthDate, admissionDate, IDtype, taxpayerNumber, citizenNumber)
    + getCollaborators()
}
'us5
class Skill {
    - String name
    - String informalDescription
    - String technicalDescription
    + Skill(name, skillCategory, informalDescription, technicalDescription)
}

class SkillController {
    + getSkillList()
}

class CollaboratorController {
    + getCollaboratorList()
    + generateATeamProposal(minimumSize, maximumSize, requiredSkillList)
}

class AddSkillToACollaboratorUI {
    + generateATeamProposal(minimumSize, maximumSize, requiredSkillList)
    + getSkillList()
}

class CollaboratorRepository {
    + getCollaborators()
}

class SkillRepository {
    + getSkillList()
}

class Repositories {
    + getSkillRepository()
}

'us6
class RegisterVehicleUI {

}
class VehicleController {
     + getVehicleByPlate(plate)
     + getVehicleBrandsList()
     + getVehicleModelsList(brand)
     + getVehicleTypesList(model)
     + saveNewVehicle(tareWeight, grossWeight, currentKm, \nregisterDate, acquisitionDate, maintenanceFrequency, \nplate, brand, model, type)
 }


class Vehicle {
    - String brand
    - String model
    - String type
    - String plate
    - double tareWeight
    - double grossWeight
    - double currentKm
    - String registerDate
    - String acquisitionDate
    - double maintenanceFrequency

    + createNewVehicle(tareWeight, grossWeight, currentKm, \nregisterDate, acquisitionDate, maintenanceFrequency, \nplate, brand, model, type)
}
class VehicleRepository {
    - List<Vehicle> vehicles

    + storeVehicle(vehicle)
    + getVehicleByPlate(plate)
    + getVehicleBrandsList()
        + getVehicleModelsList(brand)
        + getVehicleTypesList(model)
}

class VehicleController{
+getVehicleRepository()
+RegisterVehicleMaintenance()
+UpdateVehicle()
}



class VehicleRepository{
- List Vehicles
}


class VehicleRepository {
     registerVehicle(vin, brand, model, vehiclePlate, tareWeight,grossWeight, currentKm, acquisitionDate, maintenanceFrequency)
     getVehiclesNeedingMaintenance()
     getMaintenanceList(vehicle)
}



class Repositories {
     getBrandRepository()
     getVehicleRepository()
}

class VehicleController {
     getVehiclesList()
     generateMaintenanceList(vehiclesList)
}


class RegisterGreenSpaceUI {
}

class GreenSpaceController {
    + getGreenSpace(name, address)
    + getGreenSpaceType()
    + saveNewGreenSpace(name, address, area, type)
    +  storeGreenSpace(greenSpace)
}



class GreenSpaceRepository {
    - List<GreenSpace> greenSpaces
    + getGreenSpace(name, address)
    + getGreenSpaceType()
    + storeGreenSpace(greenSpace)
}
class GreenSpace {
    - String name
    - Type type
    - Double area

   + saveNewGreenSpace(name, address, area, type)
}

class Address {
    - String street
    - String city
    - String zipCode

    + createAddress(street, city, zipCode)
    }

'us21
class ToDoListGUI {
}

class GreenSpaceController {
    + getGreenSpaces() : GreenSpace[]
}

class ToDoListController {
    + createToDoList(title : String, description : String, degreeOfUrgency : String, expectedDuration : String, status : String) : ToDoList
}

class Repositories {
    + getGreenSpaceRepository()
}

class GreenSpaceRepository {
    + getGreenSpaces() : GreenSpace[]
}

class ToDoList {
    + addToDoListEntry() : void
    + validateEntry() : void
}


class Repositories {
    + getAgenda()
    + getToDoList()
}


class Agenda{
    getEntries()
}

class ToDoList{
    + getToDoList()
    + AddEntry(entry)
}




class Agenda {
    + add(collaborator)
    + remove(collaborator)
    + update(collaborator, name, email, address, phone, job, skills, birthDate, admissionDate, IDtype, taxpayerNumber, citizenNumber)
    + getCollaborators()
}

class Repositories {
    + getTeamRepository()
    + getCollaboratorRepository()
}

class AgendaEntry{
    entry
    startDate
    endDate
    status
    vehicles
    duration

    + getEntryTitle()
    + getDateToString()
    + setDate(Date date)
    + getDate()
    + validateDate()
    + validatePostponeDate()
    + toString()
    +void setNewEntryState()
    +String getEntry()
    +Date getStartDate()
    +Date getEndDate()
    +String getDuration()
        +getTeam()
        +setEntry()
        +setTeam()
        +getVehicles()
        +setVehicles()
        +getStatus()
        +setStatus()
        +getDuration()
        +setDuration()
        +addVehicle()
        +removeVehicle()
}



class Agenda {
    -static final List<AgendaEntry> agenda
    +void addEntry(Entry entry)
    +static void printEntryAt(int nList)
    +static List<AgendaEntry> getAgenda()
    +static AgendaEntry getEntryAt(int nList)
    +static int getSize()
}

class PostponeEntryGUI {
}

class Repositories{
    + getAgenda()
    + getTeamRepository()
}




class Agenda {
    +List<AgendaEntry> getEntryList()
    +boolean cancelEntry(AgendaEntry entry)
}

class CancelEntryGUI {
}


class VehicleController {
    + getVehicles()
}

class AddVehicleToAgendaEntryUI {
}

class VehicleRepository {
    - List<Vehicle> vehicles
    + getVehicles()
}

class Agenda {
    - List<AgendaEntry> entries
    + getAgendaEntries()
    + addVehicleToAgendaEntry(vehicle, entry)
}


class GreenSpaceController {
    + getGreenSpacesByUser(userEmail : String) : GreenSpace[]
}
class GreenSpaceRepository {
    + getGreenSpacesByUser(userEmail : String) : GreenSpace[]
}

class GreenSpace {
    - String name
    - int size
    - String manager
}


class Collaborator {
    -email: String
    -name: String
    -address: Address
    -phone: String
    -job: Job
    -skills: List<Skill>
    -birthDate: Date
    -admissionDate: Date
    -IDtype: String
    -taxpayerNumber: int
    -citizenNumber: int
    -isFree: boolean
        - documentType : String
        - identificationNumber : String


    + Collaborator(email, name, address, phone, job, birthDate, admissionDate, IDtype, taxpayerNumber, citizenNumber, skills)
    + addSkill(skill)
    + removeSkill(skill)
        + verifyCollaborator(collaborator) : void
            + addSkill(skill)
            + removeSkill(skill)
}

class Agenda {
    -entries: List<AgendaEntry>
}



'us29
class CompleteTaskStatusUI {
}

class Agenda {
    -entries: List<AgendaEntry>
    +getEntries(): List<AgendaEntry>
    +addEntry(entry: AgendaEntry): void
    +removeEntry(entry: AgendaEntry): void
    +updateEntry(old: AgendaEntry, newEntry: AgendaEntry): void
}

class Entry{
    title
    Description
    expectedDuration
    Urgency
}


class AgendaController {
    -agenda: Agenda
    +postponeEntry(entry: AgendaEntry, date: Date): AgendaEntry
    +addEntry(entry: AgendaEntry): void
    +removeEntry(entry: AgendaEntry): void
    +getAgenda(): Agenda
    +assignTeamToEntry(team: Team, entry: AgendaEntry): void
    +addVehiclesToAgendaEntry(agendaEntry: AgendaEntry, vehicle: Vehicle): void
    +removeVehiclesFromAgendaEntry(agendaEntry: AgendaEntry, vehicles: List<Vehicle>): void
    +cancelAgendaEntry(entry: AgendaEntry): void
    +getVehiclesNotAssignedToAnyAgendaEntry(vehicles: List<Vehicle>): List<Vehicle>
    +getVehiclesAssignedToAgendaEntry(entry: AgendaEntry): List<Vehicle>
    +updateVehicle(vehicle: Vehicle, date: Date, km: int): void
    +getAgendaEntries()
    +getTeamsFreeAtDate(startDate, endDate, teams)
    +addTeamToAgendaEntry()
}

RegisterSkillUI --> SkillsController
SkillsController --> Repositories
Repositories --> CollaboratorRepository
RegisterJobGUI --> RegisterJobController
RegisterJobController --> Repositories
Repositories --> JobRepository
JobRepository --> Job
RegisterCollaboratorUI --> CollaboratorController
CollaboratorController --> Repositories
CollaboratorRepository --> Collaborator
Collaborator --> Skill
SkillController --> Repositories
AddSkillToACollaboratorUI --> SkillController
SkillRepository --> Skill
RegisterVehicleUI --> VehicleController
VehicleController --> Repositories
Repositories --> VehicleRepository
VehicleRepository --> Vehicle
RegisterGreenSpaceUI --> GreenSpaceController
GreenSpaceController --> Repositories
Repositories --> GreenSpaceRepository
GreenSpaceRepository --> GreenSpace
GreenSpace --> Address
ToDoListGUI --> ToDoListController
ToDoListController --> Repositories
Repositories --> ToDoList
AgendaController --> Repositories
Repositories --> Agenda
Agenda --> AgendaEntry
PostponeEntryGUI --> AgendaController
CancelEntryGUI --> AgendaController
AddVehicleToAgendaEntryUI --> AgendaController
CompleteTaskStatusUI --> AgendaController
AgendaController --> Repositories
ToDoList --> Entry
AgendaEntry --> Entry 

@enduml