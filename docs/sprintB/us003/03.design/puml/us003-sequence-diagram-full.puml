@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "HRM" as HRM
participant ":RegisterCollaboratorUI" as UI
participant ":RegisterCollaboratorController" as CTRL
participant ":Repositories" as GlobRepo
participant "repositories\n:Repositories" as PLAT
participant "collaboratorRepository:\nCollaboratorRepository" as CLBREP
participant ":Collaborator" as CLB
participant "jobRepository:\nJobRepository" as jobRepository


activate HRM

        HRM -> UI : wants to register a new collaborator

        activate UI

            UI -> CTRL** : create

            UI --> HRM : asks for the info needed (name, birthdate, contactMobile, email, address, zipCode, \n city, documentType[], documentCode, admissionDate)

            HRM -> UI : provides the needed info

            'UI --> HRM: shows a verication dialog
            'HRM -> UI: confirms collaborator creation

            UI -> CTRL: createCLB(name, birthdate, contactMobile, email, address, zipCode, \n city, documentType[], documentCode, admissionDate)

            activate CTRL

                CTRL -> GlobRepo : getInstance()
                activate GlobRepo

                    GlobRepo --> CTRL: repositories
                deactivate GlobRepo

                CTRL -> PLAT : getCollaboratorRepository()
                activate PLAT

                    PLAT --> CTRL: collaboratorRepository
                deactivate PLAT

                CTRL -> CLBREP : createCLB((name, birthdate, contactMobile, email, address, zipCode,\n city, documentType[], documentCode, admissionDate)

            deactivate CTRL

            activate CLBREP
            CLBREP->CLB** : create(name, birthdate, contactMobile, email, address, zipCode,\n city, documentType[], documentCode, admissionDate)
            deactivate CLBREP
            activate CLB
            CLB -> CLB : verifyFilled(collaborator)
            activate CLB
            CLB -> CLB : verifyMobile(collaborator)
            activate CLB
            CLB -> CLB : verifyEmail(collaborator)
            activate CLB
            CLB -> CLB : verifyZipCode(collaborator)
            activate CLB
            CLB -> CLB : verifyBirth(collaborator)
            activate CLB

            loop for all documentType objects
            CLB -> CLB : verifyDocumentCode(collaborator)
            activate CLB
            CLB --> CLB
            deactivate CLB
            end loop

            CLB --> CLB
            deactivate CLB
            CLB --> CLB
            deactivate CLB
            CLB --> CLB
            deactivate CLB
            CLB --> CLB
            deactivate CLB
            CLB --> CLB
            deactivate CLB

            CLB -->CLBREP : collaborator
            deactivate CLB
            activate CLBREP








            UI --> ADM : shows task category list\n and asks to sleect one
        deactivate UI

    ADM -> UI : selects a task category
    activate UI

        UI --> ADM : requests data
    deactivate UI

    ADM -> UI : types requested data (reference, description, \ninformal description, technical description,\nduration, cost)
    activate UI

        UI --> ADM : shows selected category and requested data
    deactivate UI

    ADM -> UI : submits data
    activate UI

        UI -> CTRL : createTask(reference,\ndescription,\ninformalDescription,\ntechnicalDescription,\nduration, cost,\ntaskCategoryDescription)
        activate CTRL

            CTRL -> CTRL : getTaskCategoryByDescription(taskCategoryDescription)
            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

                CTRL -> PLAT : getTaskCategoryRepository()
                activate PLAT

                    PLAT -> CTRL : taskCategoryRepository
                deactivate PLAT

                CTRL -> TaskCategoryRepository : getTaskCategoryByDescription(taskCategoryDescription)
                activate TaskCategoryRepository

                    TaskCategoryRepository --> CTRL : taskCategory
                deactivate TaskCategoryRepository
                    CTRL --> CTRL : taskCategory
            deactivate CTRL

            |||
            CTRL -> CTRL : getEmployeeFromSession()
            activate CTRL

                CTRL -> _APP: getInstance()
                activate _APP
                    _APP -> CTRL: appSession
                deactivate _APP


                CTRL -> APP: getCurrentSession()
                activate APP

                    APP --> CTRL: currentSession
                deactivate APP

                CTRL -> SESSAO: email = getUserEmail()
                activate SESSAO

                    SESSAO --> CTRL: email
                deactivate SESSAO


                CTRL -> PLAT: getOrganizationRepository(email)
                activate PLAT

                    PLAT --> CTRL: organizationRepository
                deactivate PLAT


                CTRL -> OrganizationRepository: getOrganizationByEmployeeEmail(email)
                activate OrganizationRepository

                    loop [for each organization
                        OrganizationRepository -> ORG : anyEmployeeHasEmail(email)
                        activate ORG

                             ORG --> OrganizationRepository : true/false
                        deactivate ORG
                    end
                    OrganizationRepository --> CTRL : organization
                deactivate OrganizationRepository

                CTRL -> ORG: getEmployeeByEmail(email)
                activate ORG

                    ORG --> CTRL : employee
                deactivate ORG

                CTRL --> CTRL : employee
            deactivate CTRL

            |||
            CTRL -> ORG: createTask(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, , taskCategory, employee)
            activate ORG

                ORG -> TAREFA**: create(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, taskCategory, employee)
                ORG -> ORG: addTask (task)


                activate ORG
                    ORG -> ORG: validateTask(task)
                    activate ORG
                        ORG --> ORG
                    deactivate ORG

                    ORG --> ORG
                deactivate ORG

                ORG --> CTRL : task

            deactivate ORG

            CTRL --> UI: task
            deactivate CTRL
            UI --> ADM: displays operation success
    deactivate UI

deactivate ADM

@enduml